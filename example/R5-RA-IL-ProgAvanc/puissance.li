Header
  
  + name := PUISSANCE;
  /*
The classical factorial example in Lisaac Î©.
  
In this example, the traditional recursive implementation of the factorial function, both the tail-recursive and non-tail-recursive versions, as well as an example with signed integers that do not overflow.
  */

Public
  
  - puissance (x:REAL_64, n:INTEGER) :REAL_64 <-
  ( + result:REAL_64
    if (n = 0) then {
      result := 1
    } else {
      result := x * puissance (x, n - 1)
    }
    result
  )
  
  - main <-
  ( + x:REAL_64;
    + n:INTEGER;  
    if ((COMMAND_ARGS upper != 2) || {! COMMAND_ARGS at 2 .is_integer}) then {
      "usage: ./puissance <x> <n>" println
      SYSTEM exit 1
    }
    x := COMMAND_ARGS at 1 .to_real_64
    n := COMMAND_ARGS at 2 .to_integer
    OUT # "puissance(" # x # ',' # n # ")=" # (puissance (x,n)) # '\n'
    OUT # "puissance(" # x # ',' # n # ")=" # (puissance (x,n) acc 1) # '\n'
  );
  
  - puissance (x:REAL_64, n:INTEGER) acc acc:REAL_64 :REAL_64 <-
  ( + result:REAL_64
    if (n = 0) then {
      result := acc
    } else {
      result := puissance (x, n - 1) acc (x * acc)
    }
    result
  )
 