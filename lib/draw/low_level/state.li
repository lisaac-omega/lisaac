Header
  
  + name := STATE;
  
Inherit
  
  - parent_constant_pen:CONSTANT_PEN := CONSTANT_PEN
  
Private
  
  - stack:ARRAY STATE := ARRAY STATE.create_with_capacity 16

  - make <-
  (
    xform  := TRANSFORM.create
    fill   := PAINT.create
    stroke := PAINT.create
    scissor := SCISSOR.create
    scissor.make
  )

Public
  
  + call_count:INTEGER
  - update_call_count <- ( call_count := pen_gl.calls.count; )
  
  + composite_operation:COMPOSITE_OPERATION_STATE
  + fill:PAINT
  + stroke:PAINT
  + stroke_width:REAL_32
  + miter_limit:REAL_32
  + line_join:INTEGER
  + line_cap:INTEGER
  + alpha:REAL_32
  + xform:TRANSFORM
  + scissor:SCISSOR
  + font_size:REAL_32
  + letter_spacing:REAL_32
  + line_height:REAL_32
  + font_blur:REAL_32
  + text_align:INTEGER
  + font_id:INTEGER

  - create:STATE <- 
  ( + result:STATE
    (stack.is_empty).if {
      result := clone
    } else {
      result := stack.pop
    }
    result.make
    result
  )
  
  - free <-
  ( 
    xform.free
    fill.free
    stroke.free
    scissor.free
    //(scissor.xform != NULL).if { scissor.xform.free; }
    stack.add_last Self
  )

  - copy other:STATE <-
  (
    call_count := pen_gl.calls.count
    copy_not_call_count other
  )
  
  - copy_not_call_count other:STATE <-
  (
    composite_operation := other.composite_operation
    fill.copy   (other.fill)
    stroke.copy (other.stroke)
    stroke_width := other.stroke_width
    miter_limit := other.miter_limit
    line_join := other.line_join
    line_cap := other.line_cap
    alpha := other.alpha
    xform.copy  (other.xform)
    scissor.copy (other.scissor)
    //scissor := other.scissor
    //(scissor != other.scissor).if { "BUG".println; exit 2; }
    //(scissor.xform != NULL).if {
    //  scissor.set_xform (TRANSFORM.create)
    //  scissor.xform.copy (other.scissor.xform)
    //}
    font_size := other.font_size
    letter_spacing := other.letter_spacing
    line_height := other.line_height
    font_blur := other.font_blur
    text_align := other.text_align
    font_id := other.font_id
  )

  - set_letter_spacing s:REAL_32 <- ( letter_spacing := s; )
  
  - set_line_height w:REAL_32 <- ( line_height := w; )
  
  - set_composite_operation o:INTEGER <- ( composite_operation.make o; )
  
  - set_line_cap cap:INTEGER <- ( line_cap := cap; )
  
  - set_line_join cap:INTEGER <- ( line_join := cap; )
  
  - set_stroke_width w:REAL_32 <- ( stroke_width := w; )
  
  - set_miter_limit l:REAL <- ( miter_limit := l; )
  
  - set_stroke p:PAINT <- ( stroke := p; )
  
  - set_font_size s:REAL_32 <- ( font_size := s; )

  - set_font_blur b:REAL_32 <- ( font_blur := b; )
  
  - set_font_id id:INTEGER <- ( font_id := id; )

  - set_text_align a:INTEGER <- ( text_align := a; )

  - reset <-
  (
    composite_operation.make /* := COMPOSITE_OPERATION_STATE.create*/ source_over
    fill  .set_color (COLOR.rgba (255,255,255,255))
    stroke.set_color (COLOR.rgba (  0,  0,  0,255))
    stroke_width := 1
    miter_limit := 10
    line_join := miter
    line_cap := butt
    alpha := 1
    xform.identity
    scissor.reset
    font_size := 16
    letter_spacing := 0
    line_height := 1
    font_blur := 0
    text_align := align_left | align_baseline
    font_id := 0
  )
  
  - get_font_scale:REAL_32 <-
  (
    quantize (xform.average_scale, 0.01).min 4.0
  )
  
Private
  
  - quantize (a,d:REAL_32) :REAL_32 <-
  (
    d * (a / d + 0.5).to_integer
  )
