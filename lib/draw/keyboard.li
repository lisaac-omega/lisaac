Header

  + name := KEYBOARD;

  /*GLFW - Keyboard Driver*/
  
Inherit
  
  - parent_utils:UTILS := UTILS
  
Public
 
  - cmd:UINTEGER_8 := 40h; // 0:CTRL 1:AltGr 2:Alt 3:Cmd 4:Shift 5:Cap 6:NumLock 7:Scrolllock
  
  - str:STRING_BUFFER := STRING_BUFFER.create 8
  
  - num_str:STRING_BUFFER := // "\0A7h\\0A8h\\0A9h\\0A0h\\0B9h\" Bug compilo
  ( + r:STRING_BUFFER
    r := STRING_BUFFER.create 6
    r.add_last '\0A7h\';  r.add_last '\0A8h\'
    r.add_last '\0A9h\';  r.add_last '\0A0h\'
    r.add_last '\0B9h\'
    r
  )
  
PAPER
  
  - key k:INTEGER code key:INTEGER press p:BOOLEAN mods mods:UINTEGER_8 <-
  ( + cu:UINTEGER_8
    + name:NATIVE_ARRAY CHARACTER
    + idx,i:INTEGER
    + cm:UINTEGER_8
    + cc:CHARACTER

    //"KEYB.LI: ".print; k.to_integer.print; ' '.print; key.print; ' '.print
    //p.print; ' '.print; mods.println
    
    cm := cmd
    name := `glfwGetKeyName(@k,@key)`:NATIVE_ARRAY CHARACTER
    str.clear
    (!name.is_null).if {
      (p).if {        
        ((cmd & num_lock = 0) && {k.in_range `GLFW_KEY_KP_0`:INTEGER to `GLFW_KEY_KP_DECIMAL`:INTEGER}).if {
          (cm,cc) := (cm | key_cmd, "IEDNL5RBUPS".item (k - `GLFW_KEY_KP_0`:INTEGER))
          str.add_last cc
        }.elseif {cmd & alt_gr != 0} then {          
          (k.in_range 50 to 57).if { str.add_last ("~#{[|`\\^".item (k-50)); }
          .elseif {k = 48} then { str.add_last '@'; }.elseif {k = 45} then { str.add_last ']'; }
          .elseif {k = 61} then { str.add_last '}'; }.elseif {k = 69} then { str.append "€"; }
        } else {          
          str.add_last (name.first); cu := name.first; i := i + 1
          ((cu & 1000_0000b) != 0).if { // utf8 sequence:
            str.add_last (name.at i); i := i + 1
            ((cu & 1110_0000b) = 1110_0000b).if {
              str.add_last (name.at i); i := i + 1
              ((cu & 1111_0000b) = 1111_0000b).if {
                str.add_last (name.at i); i := i + 1
              }
            }
          }
          (cmd & (shift|cap) != 0).if {
            (str.first.is_lower).if {
              str.at 0 put (str.at 0.to_upper)
            } else {
              (str.count = 1).if {
                cc := str.first
                (cc = '^').if {
                  str.remove_last; str.append "¨"
                }.elseif {cc = '$'} then {
                  str.remove_last; str.append "£"
                }.elseif {cc = '*'} then {
                  str.remove_last; str.append "µ"
                }.elseif {(idx :=  "&\"'(-_=,;:<^".last_index_of cc) != -1} then {
                  str.at 0 put ("134568+?./>".at idx)
                }
              } else {
                ? {str.count > 1}
                ((idx := num_str.last_index_of (str.at 1)) != -1).if {
                  str.at 0 put ("9720%".at idx); str.remove_last
                } else {
                  "KEYBOARD l77=".print; str.at 1.to_uinteger_8.print_hex; '\n'.print
                }
              }
            }
          }
        }
      }
    } else {
      (p).if {        
        (k)
        .when `GLFW_KEY_SPACE`:INTEGER then { cc := ' '; }
        .when `GLFW_KEY_ESCAPE`:INTEGER then { (cm,cc) := (cm | key_cmd, '\27\'); }
        .when `GLFW_KEY_ENTER`:INTEGER or `GLFW_KEY_KP_ENTER`:INTEGER then { (cm,cc) := (cm | key_cmd, '\0Ah\'); }
        .when `GLFW_KEY_TAB`:INTEGER to `GLFW_KEY_END`:INTEGER then {
          (cm,cc) := (cm | key_cmd, "\t\bISRLDUPNBE".item (k-`GLFW_KEY_TAB`:INTEGER))
        }        
        .when `GLFW_KEY_CAPS_LOCK`:INTEGER   then { cmd := cmd ^ cap; }
        .when `GLFW_KEY_NUM_LOCK`:INTEGER    then { cmd := cmd ^ num_lock; }
        .when `GLFW_KEY_SCROLL_LOCK`:INTEGER then { cmd := cmd ^ scroll_lock; }
        //.when `GLFW_KEY_PRINT_SCREEN`:INTEGER then { }
        //.when `GLFW_KEY_PAUSE`:INTEGER then { }
        .when `GLFW_KEY_F1`:INTEGER to `GLFW_KEY_F12`:INTEGER then {
          (cm,cc) := (cm | key_cmd, 'a'+#(k.to_integer-`GLFW_KEY_F1`:INTEGER))
        }             
        .when `GLFW_KEY_LEFT_SHIFT`:INTEGER or `GLFW_KEY_RIGHT_SHIFT`:INTEGER     then { cmd := cmd | shift; }
        .when `GLFW_KEY_LEFT_CONTROL`:INTEGER or `GLFW_KEY_RIGHT_CONTROL`:INTEGER then { cmd := cmd | ctrl; }
        //.when `GLFW_KEY_LEFT_SUPER`:INTEGER or `GLFW_KEY_RIGHT_SUPER`:INTEGER then { cmd := cmd ^ shift; }
        .when `GLFW_KEY_LEFT_ALT`:INTEGER  then { cmd := cmd | alt; }
        .when `GLFW_KEY_RIGHT_ALT`:INTEGER then { cmd := cmd | alt_gr; }
        //.when `GLFW_KEY_MENU`:INTEGER      then { /*put ((cmd.to_uinteger_16 << 8) | key_cmd | 'M'.to_uinteger_8);*/ }
        (cc != '\0').if { str.add_last cc; }
      } else {
        (k)
        .when `GLFW_KEY_LEFT_SHIFT`:INTEGER or `GLFW_KEY_RIGHT_SHIFT`:INTEGER     then { cmd := cmd & (~shift); }
        .when `GLFW_KEY_LEFT_CONTROL`:INTEGER or `GLFW_KEY_RIGHT_CONTROL`:INTEGER then { cmd := cmd & (~ctrl); }
        //.when `GLFW_KEY_LEFT_SUPER`:INTEGER or `GLFW_KEY_RIGHT_SUPER`:INTEGER then { cmd := cmd ^ shift; }
        .when `GLFW_KEY_LEFT_ALT`:INTEGER  then { cmd := cmd & (~alt); }
        .when `GLFW_KEY_RIGHT_ALT`:INTEGER then { cmd := cmd & (~alt_gr); }
      }
    }
    (! str.is_empty).if {
      //"KEY=".print; str.println
      put str cmd cm
    }
    //key_to_string (cmd.to_uinteger_16 <<8).println
  )

Public  
  
  - record:BOOLEAN
  
  //- macro_buffer:ARRAY UINTEGER_16 := ARRAY UINTEGER_16.create_with_capacity 32
  
  /*
  - set_record b:BOOLEAN <-
  (
    b.if {
      record := TRUE
      macro_buffer.clear
    } else {
      record := FALSE
    }
  )
  
  - play <-
  ( 
    macro_buffer.foreach { k:UINTEGER_16
      PAPER.root.key_event k
    }
  );*/
  
  - listen w:WINDOW <- ( win := w; )
  - win:WINDOW
  
  - put s:STRING cmd c:UINTEGER_8 <-
  (
    (record).if {
      //macro_buffer.add_last k
    }
    //"Key to String:".print; key_to_string s cmd c.println
    (win != NULL).if { win.key s cmd c; } else { PAPER.wins.first.key s cmd c; }
  )
      
  // Key code generate.

  // 0:CTRL 1:AltGr 2:Alt 3:Cmd 4:Shift 5:Cap 6:NumLock 7:ScrollLock
  - ctrl  :UINTEGER_8  := 01h
  - alt_gr:UINTEGER_8  := 02h
  - alt   :UINTEGER_8  := 04h
  - key_cmd:UINTEGER_8 := 08h
  - shift :UINTEGER_8  := 10h
  - cap   :UINTEGER_8  := 20h
  - num_lock:UINTEGER_8:= 40h
  - scroll_lock:UINTEGER_8 := 80h
  - key_of c:CHARACTER :UINTEGER_8 <- c.to_uinteger_8
  - msk_cmd:UINTEGER_8 <- ctrl | alt | key_cmd
  
  - key_to_string s:STRING cmd cm:UINTEGER_8 :STRING_ALIAS <-
  ( + result:STRING_ALIAS
    STRING.tmp { tmp:STRING_BUFFER
      ((cm &    ctrl) != 0).if { tmp.append "Ctrl ";  }
      ((cm &  alt_gr) != 0).if { tmp.append "AltGr "; }
      ((cm &     alt) != 0).if { tmp.append "Alt ";   }
      ((cm &   shift) != 0).if { tmp.append "Shift "; }
      ((cm & key_cmd) != 0).if {
        (s.first)
        .when 'a' to 'l' then { tmp.add_last 'F'; ((s.first - 'a').to_integer_8+1).append_in tmp; }
        .when 'U' then { tmp.append "Up";   }.when 'D' then { tmp.append "Down"; }
        .when 'L' then { tmp.append "Left"; }.when 'R' then { tmp.append "Right"; }
        .when 'P' then { tmp.append "PgUp"; }.when 'N' then { tmp.append "PgDown"; }
        .when 'M' then { tmp.append "Menu"; }.when 'S' then { tmp.append "Suppr"; }
        .when 'B' then { tmp.append "Beg";  }.when 'E' then { tmp.append "End"; }
        .when 'I' then { tmp.append "Inser"; }
        .when '\09\'  then { tmp.append "Tab"; }
        .when '\08\'  then { tmp.append "Del"; }
        .when '\0Ah\' then { tmp.append "Enter"; }
        .when '\27\'  then { tmp.append "Esc"; }
      } else {
        (s.first = ' ').if { tmp.append "Space"; } else { tmp.append s; }
      }
      result := tmp.to_string_alias
    }
    result
  )
  
  
