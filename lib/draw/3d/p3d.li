Header  
  + name := P3D;
  
Inherit  
  + parent_o3d:Expanded O3D
  
Private
  
  - free_list:ARRAY P3D := ARRAY P3D.create_with_capacity 16
  
Public
  
  - pen_gl:PEN_GL <- PAPER.wins.first.pen.gl
  
  + obj:O3D_MODEL
  + col:COLOR
  + img_id:INTEGER
        
  - new (m:O3D_MODEL) :P3D <-
  ( + result:P3D
    (free_list.is_empty).if {
      result := clone
      result.make m
    } else {
      result := free_list.pop
      result.reset m
    }
    result
  )
  
  - make m:O3D_MODEL <-
  ( model := MAT4X4.create
    col := COLOR.rgb (255,0,0)
    img_id := -1
    reset m
  )
  
  - reset m:O3D_MODEL <-
  (    
    model.identity
    img_id := -1
    obj := m
  )
  
  - free <- free_list.add_last Self
  
Public
  
  - align_down:SELF     <- up 0.5
  - align_up:SELF       <- down 0.5
  - align_right:SELF    <- left 0.5
  - align_left:SELF     <- right 0.5
  - align_forward:SELF  <- backward 0.5
  - align_backward:SELF <- forward 0.5
  
  - Self:SELF '+' other:O3D :O3D <-
  ( + result:L3D
    + r3d:L3D
    r3d ?= other
    (r3d != NULL).if {
      r3d.apply_model
      r3d.list.add_last Self
      result := r3d
    } else {
      result := L3D.create Self and other
    }
    result
  )
        
  - Self:SELF '<>' other:O3D :O3D <-
  (
    other.translate (model.extract_translate)
    Self + other
  )
 
  // Draw
  
  - color c:COLOR :SELF <- ( col := c; Self)
  
  - img id:INTEGER :SELF <- ( img_id := id; Self)
  
O3D
  
  - draw_intern <-
  ( + call:PEN_CALL
    call := PEN_CALL_3D.create (col,img_id) start (obj.lower) count ((obj.upper-obj.lower+1)/3) model model
    pen_gl.calls.add_last call
    free
  )
  
Public
   
  // Primitives
  
  - square:P3D   <- new (PEN3D.square)
  - cube:P3D     <- new (PEN3D.cube)
  - cylinder:P3D <- new (PEN3D.cylinder)
  - cone:P3D     <- new (PEN3D.cone)
  - sphere:P3D   <- new (PEN3D.sphere)
  - tri_prism:P3D <- new (PEN3D.tri_prism)
  
  //- stl_at i:INTEGER :P3D <- create (PEN3D.stl_lower.at i,PEN3D.stl_upper.at i)
  //- tetrahedron    (pyramid avec base triangle)
  //- square_pyramid (base carre)
  
  // Other
    
  - torus radius:REAL_32 :P3D <-
  [ ? {radius.in_range 0.0 to 1.0}; ]
  ( + result:SELF
    + low:INTEGER
    result := clone
    low := PEN3D.index.count
    PEN3D.add_torus radius
    result.make (low,PEN3D.index.upper); // count := sides * cs_sides * 2
    result
  )
    
  // Free create
  
  - begin:P3D <- create (PEN3D.index.count,PEN3D.vertex.count)
  - end:P3D   <- ( upper := PEN3D.index.upper; Self)
  
  - vertex (x,y,z:REAL_32) :P3D <-
  ( PEN3D.add_vertex (x,y,z)
    Self
  )
  
  - triangle (p0,p1,p2:UINTEGER_32) :P3D <-
  ( PEN3D.add_triangle (p0+upper,p1+upper,p2+upper)
    Self
  )
  
  - quad (p0,p1,p2,p3:UINTEGER_32) :P3D <-
  ( PEN3D.add_quad (p0,p1,p2,p3)
    Self
  )

  - rotate_gx a:REAL_32 :SELF <-
  (
    model.translate_direct (0,-obj.g.y,-obj.g.z)
    model.rotate_x a
    model.translate_direct (0,+obj.g.y,+obj.g.z)
    Self
  )
  
  - rotate_gy a:REAL_32 :SELF <-
  (
    model.translate_direct (-obj.g.x,0,-obj.g.z)
    model.rotate_y a
    model.translate_direct (+obj.g.x,0,+obj.g.z)
    Self
  )
  
  - rotate_z a:REAL_32 :SELF <-
  (
    model.translate_direct (-obj.g.x,-obj.g.y,0)
    model.rotate_z a
    model.translate_direct (+obj.g.x,+obj.g.y,0)
    Self
  )
