Header
  + name := Strict UNDO_ELT;
  
Inherit
  - parent_clone:CLONE := CLONE
  
Private
  - stk:Expanded ARRAY UNDO_ELT
  - tmp:STRING_BUFFER := STRING_BUFFER.create 4
Public
  - stack_size:INTEGER := 32_768; // Power 2 !!
  
  + pt_i:INTEGER
  + char:UINTEGER_32
  + type:INTEGER_8
  
  - str:STRING_BUFFER <-
  ( + c:UINTEGER_32
    tmp.clear
    c := char
    {c != 0}.while_do {
      tmp.add_first (c.to_uinteger_8.to_character)
      c := c >> 8
    }
    tmp
  )
  
  - run t:TXT_BUF dir dir:INTEGER_8 <-
  (
    (type ^ dir)
    .when (UNDO.t_rm)  then { rm t;  }
    .when (UNDO.t_add) then { add t; }
  )
    
  - rm t:TXT_BUF <-
  ( t.rm pt_i
    t.set_pos_raw pt_i
  )
  
  - add t:TXT_BUF <-
  ( t.at pt_i add str
    t.set_pos_raw (pt_i + tmp.count)
  )
  
  - init i:INTEGER char c:UINTEGER_32 type t:INTEGER_8 :SELF <-
  ( (pt_i,char,type) := (i,c,t); Self)
  
  - new:SELF <-
  ( + r:SELF; (stk.is_empty).if { r := clone; } else { r := stk.pop; }; r)
  
  - free <- stk.add_last Self
  
  - print <-
  (
    pt_i.print; ' '.print
    type
    .when (UNDO.t_rm)  then { "rm".print;  }
    .when (UNDO.t_add) then { "add".print; }
    "`".print; str.print; '\''.println;
  )
