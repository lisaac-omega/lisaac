Header

  + name    := SIGNED_FIXED_REAL;

  /*Signed real number of fixed decimal part.*/

Insert

  - parent_fixed_real:FIXED_REAL := FIXED_REAL

Public

  // Bound test

  - bound_test low:INTEGER_64 to up:UINTEGER_64 :BOOLEAN <-
  (
    (low < to_raw_integer_64) && {up > to_raw_uinteger_64}
  )

  // Around

  - object_size:INTEGER := 4

  - floor:INTEGER <-
  // Greatest integral value no greater than Current.
  (
    to_raw_integer_32 >> shift_bits
  )
  [
    +? {Self >= Result}
    +? {(Self - Result) < 1}
  ]

  - ceiling:INTEGER <-
  // Smallest integral value no smaller than Current.
  (
    (to_raw_integer_32 + ((1 << shift_bits) - 1)) >> shift_bits
  )
  [
    +? {Self <= Result}
    +? {(Self - Result) < 1}
  ]

  - rounded:INTEGER <-
  // Rounded integral value.
  (
    (to_raw_integer_32 + ((1 << shift_bits) / 2)) >> shift_bits
  )

  - truncated_to_integer:INTEGER <- floor
  // Integer part (largest absolute value no greater than Current).

  // binary operator :

  - Self:SELF '-'  Left 80  other:SELF :SELF <-
  (
    CAST INTEGER_32 TO SELF.on (to_raw_integer_32 - other.to_raw_integer_32)
  )

  - Self:SELF '*#' Left 90 other:INTEGER :SELF <-
  (
    CAST INTEGER_32 TO SELF.on (to_raw_integer_32 * other)
  )

  - Self:SELF '*'  Left 90 other:SELF :SELF <-
  (
    CAST INTEGER_64 TO SELF.on ((to_raw_integer_64 * other.to_raw_integer_64) >> shift_bits)
  )

  - Self:SELF '/#' Left 90 other:INTEGER :SELF <-
  (
    CAST INTEGER_32 TO SELF.on (to_raw_integer_32 / other)
  )

  - Self:SELF '/'  Left 90 other:SELF :SELF <-
  (
    CAST INTEGER_64 TO SELF.on ((to_raw_integer_64 << shift_bits) / other.to_raw_integer_64)
  )

  - Self:SELF '&'  Left 90 other:SELF :SELF <-
  (
    CAST INTEGER_32 TO SELF.on (to_raw_integer_32 & other.to_raw_integer_32)
  )

  - Self:SELF '>>' Left 90 other:INTEGER :SELF <-
  (
    CAST INTEGER_32 TO SELF.on (to_raw_integer_32 >> other)
  )

  - Self:SELF '<<' Left 90 other:INTEGER :SELF <-
  (
    CAST INTEGER_32 TO SELF.on (to_raw_integer_32 << other)
  )

  // Test binary operator :

  - Self:SELF '>' Right 60 other:SELF :BOOLEAN <-
  (
    to_raw_integer_32 > other.to_raw_integer_32
  )

  // prefix : Unary operator

  - '~' Self:SELF :SELF <-
  (
    CAST INTEGER_32 TO SELF.on (~ to_raw_integer_32)
  )




