Header
  + name := Expanded  TIME;

  - type := `uint64_t`;

  - default := `0`:TIME;

  - external := `#include <time.h>
  #include <sys/time.h>`;
  
Insert
  - parent_clone:CLONE := CLONE

Public
    
  - to_raw:UINTEGER_32 <-
  (
    CAST SELF TO UINTEGER_32.on Self
  )

Public
  
  - gettimeofday:UINTEGER_64 <-
  ( + s:UINTEGER_64
    + us:INTEGER_64
    `{ struct timeval tv`
    `gettimeofday(&tv,NULL)`
    s := `tv.tv_sec`:UINTEGER_64
    us := `tv.tv_usec`:INTEGER_64
    `}`
    s*1_000_000 + ((us >= 0).ok us or 0).to_uinteger_64
  )
    
  - hour:UINTEGER_8 <-
  (
    (to_raw >> 24).to_uinteger_8
  )

  - minute:UINTEGER_8 <-
  (
    ((to_raw & 0FF0000h) >> 16).to_uinteger_8
  )

  - second:UINTEGER_8 <-
  (
    ((to_raw & 0FF00h) >> 8).to_uinteger_8
  )

  - csecond:UINTEGER_8 <-
  (
    (to_raw & 0FFh).to_uinteger_8
  )

Public

  - Self:SELF '>' Right 60 other:SELF :BOOLEAN <- to_raw > other.to_raw

  - Self:SELF '<' Right 60 other:SELF :BOOLEAN <- to_raw < other.to_raw

  - Self:SELF '>=' Right 60 other:SELF :BOOLEAN <- to_raw >= other.to_raw

  - Self:SELF '<=' Right 60 other:SELF :BOOLEAN <- to_raw <= other.to_raw

  - to_csecond:INTEGER <- hour.to_integer * (60*60*100) + 
minute.to_integer * (60*100) + 
second.to_integer * 100 + 
csecond

  - Self:SELF '-' Right 60 other:SELF :SELF <-
  (
    create_csecond (Self -# other)
  )

  // BSBS: A uniformiser -# +# ???

  - Self:SELF '-#' Right 60 other:SELF :INTEGER <- to_csecond - other.to_csecond

  - Self:SELF '+#' Right 60 other:INTEGER :TIME <-
  (
    create_csecond (to_csecond + other)
  )
  
  - now:TIME <-
  ( + res:SELF
    `{time_t t = time(NULL)`
    `struct tm *c = localtime(&t)`
    res := create (`c->tm_hour`:INTEGER,`c->tm_min`:INTEGER,`c->tm_sec`:INTEGER,0)
    `}`
    res
  )
 
  - create (h,m,s,cs:INTEGER) :TIME <-
  ( + t:UINTEGER_32
    ? {h.in_range 0 to 23}
    ? {m.in_range 0 to 59}
    ? {s.in_range 0 to 59}
    ? {cs.in_range 0 to 99}
    
    
    t := h.to_uinteger_32 <<24
    t := t | (m.to_uinteger_32 << 16)
    t := t | (s.to_uinteger_32 << 8)
    t := t | cs
    CAST UINTEGER_32 TO SELF.on t
  )

  - create_csecond csec:INTEGER :SELF <-
  ( + h,m,s,cs,diff:INTEGER

    diff := csec
    h := diff / (60*60*100)
    diff := diff % (60*60*100)

    m := diff / (60*100)
    diff := diff % (60*100)
    s := diff / 100
    cs := diff % 100
    create (h,m,s,cs)
  )

  - append_in b:STRING_BUFFER <-
  (
    hour.append_in b format 2 with '0'
    b.add_last ':'
    minute.append_in b format 2 with '0'
    b.add_last ':'
    second.append_in b format 2 with '0'
    b.add_last '.'
    csecond.append_in b format 2 with '0'
  )
  
  - append_hhmmss_in b:STRING_BUFFER <-
  (
    hour  .append_in b format 2 with '0'
    minute.append_in b format 2 with '0'
    second.append_in b format 2 with '0'
  )
  
  - append_hhmm_in b:STRING_BUFFER <-
  (
    hour  .append_in b format 2 with '0'
    b.add_last 'h'
    minute.append_in b format 2 with '0'
  )

  - append_short_in b:STRING_BUFFER <-
  (
    hour.append_in b format 2 with '0'
    b.add_last ':'
    minute.append_in b format 2 with '0'
  )

  
