Header  
  + name := MAIN;
  
Insert
  - parent_utils:UTILS := UTILS
  
Private  
  
  + nsize:INTEGER
  
  + linked_list:LINKED_LIST INTEGER
  + array_block:ARRAY_BLOCK INTEGER
  
Public
  - main <-
  (
    //nsize := 20000
    nsize := 2000
    nsize_test
  )
  
Private
  - nsize_test <-
  (
    ? {nsize > 1}
    check_fair_bench
  )
  
Private
  - new <-
  (
    array_block := ARRAY_BLOCK INTEGER .new_tiny
    linked_list := LINKED_LIST INTEGER .new
    idem
  )
  
Private 
  - idem <-
  ( + i:INTEGER
    TEST.check (linked_list.lower) integer (array_block.lower)
    TEST.check (linked_list.upper) integer (array_block.upper)
    TEST.check (linked_list.count) integer (array_block.count)
    //
    linked_list.is_empty.if {
      TEST.check (array_block.is_empty)
    } else {
      TEST.check (! array_block.is_empty)
    }
    //
    linked_list.is_empty.if_false {
      TEST.check (linked_list.last) integer (array_block.last)
      TEST.check (linked_list.first) integer (array_block.first)
    }
    i := 0
    {i <= linked_list.upper}.while_do {
      TEST.check (linked_list.at i) integer (array_block.at i)
      i := i + 1
    }
  )
  
  - add_last v:INTEGER <-
  (
    array_block.add_last v
    linked_list.add_last v
    idem
  )
  
  - remove_last <-
  (
    array_block.remove_last
    linked_list.remove_last
    idem
  )
  
  - add_first v:INTEGER <-
  (
    array_block.add_first v
    linked_list.add_first v
    idem
  )
  
  - remove_first <-
  (
    array_block.remove_first
    linked_list.remove_first
    idem
  )
  
  - remove idx:INTEGER <-
  (
    array_block.remove idx
    linked_list.remove idx
    idem
  )
  
  - add v:INTEGER to idx:INTEGER <-
  (
    array_block.at idx add v
    linked_list.at idx add v
    idem
  )
  
  - check_fair_bench <-
  ( + n,tier,idx:INTEGER
    new
    tier := (nsize.max 3) / 3
    tier.times {
      n := n + 1
      add_last n
    }
    idx := 0
    tier.times {
      n := n + 1
      idx := idx + 1
      add n to idx
    }
    tier.times {
      n := n + 1
      add_first n
    }
    tier.times {
      remove_first
    }
    idx := 0
    tier.times {
      idx := idx + 1
      remove idx
    }
    {linked_list.is_empty}.until_do {
      remove_last
    }
  )
