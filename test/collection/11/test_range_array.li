Header
  + name := TEST_RANGE_ARRAY;
  
Insert
  - parent_utils:UTILS := UTILS
  
Private  
  + nrmal_array:ARRAY INTEGER
  
  + range_array:RANGE_ARRAY INTEGER
  
  - long:INTEGER <- 300
  
Public
  - main <-
  ( + x,idx:INTEGER
    RANDOM.init 2
    nrmal_array := ARRAY INTEGER .create_with_capacity 2
    range_array := RANGE_ARRAY INTEGER .create_with_capacity 2 lower 0
    idem
    6.times {
      x := x + 1
      nrmal_array.add_last x
      range_array.add_last x
      idem
    }
    idx := nrmal_array.upper
    nrmal_array.remove idx
    range_array.remove idx
    idem
    idx := nrmal_array.lower
    nrmal_array.remove idx
    range_array.remove idx
    idem
    main_1
  )
  
  - main_1 <-
  ( + x:INTEGER
    RANDOM.init 2
    nrmal_array := ARRAY INTEGER .create_with_capacity 2
    range_array := RANGE_ARRAY INTEGER .create_with_capacity 2 lower 0
    x := 1
    nrmal_array.at 0 add x
    range_array.at 0 add x
    idem
    //"1 ok\n".print
    x := 2
    nrmal_array.at 0 add x
    range_array.at 0 add x
    idem
    //"2 ok\n".print
    1000.times {
      + idx:INTEGER
      x := x + 1
      idx := nrmal_array.upper
      nrmal_array.at idx add x
      range_array.at idx add x
      idem
    }
    main_3
  )
  
  - main_3 <-
  ( + x:INTEGER
    RANDOM.init 5
    //
    nrmal_array := ARRAY INTEGER .create_with_capacity 2
    range_array := RANGE_ARRAY INTEGER .create_with_capacity 2 lower 0
    nrmal_array.add_last 1
    range_array.add_last 1
    idem
    nrmal_array.add_last 2
    range_array.add_last 2
    idem
    nrmal_array.at 0 put 3
    range_array.at 0 put 3
    idem
    nrmal_array.at 1 put 4
    range_array.at 1 put 4
    idem
    nrmal_array.at 0 put 1
    range_array.at 0 put 1
    idem
    nrmal_array.at 1 put 3
    range_array.at 1 put 3
    idem
    nrmal_array.at 1 add 2
    range_array.at 1 add 2
    idem
    nrmal_array.at 3 add 5
    range_array.at 3 add 5
    idem
    nrmal_array.at 3 add 4
    range_array.at 3 add 4
    idem
    nrmal_array.at 4 add 6
    range_array.at 4 add 6
    idem
    //
    nrmal_array := ARRAY INTEGER .create_with_capacity 2
    range_array := RANGE_ARRAY INTEGER .create_with_capacity 2 lower 0
    idem
    nrmal_array.add_last 1
    range_array.add_last 1
    idem
    nrmal_array.add_last 2
    range_array.add_last 2
    idem
    long.times {
      x := nrmal_array.last
      x := x + 1
      nrmal_array.add_last x
      range_array.add_last x
      idem
    }
    {nrmal_array.is_empty}.until_do {
      nrmal_array.remove_last
      range_array.remove_last
      idem
    }
    x := 0
    long.times {
      x := x + 1
      nrmal_array.add_first x
      range_array.add_first x
      idem
    }
    {nrmal_array.is_empty}.until_do {
      nrmal_array.remove_first
      range_array.remove_first
      idem
    }
    x := 1
    nrmal_array.at 0 add x
    range_array.at (range_array.lower) add x
    idem
    long.times {
      + idx:INTEGER
      idx := RANDOM.range 0 to (nrmal_array.count)
      //("nrmal_array.count=" + nrmal_array.count.to_string + " idx=" + idx.to_string).println
      nrmal_array.at idx add x
      range_array.at (idx + range_array.lower) add x
      idem
      x := x + 1
    }
    {nrmal_array.is_empty}.until_do {
      + idx:INTEGER
      (nrmal_array.upper > 0).if {
        idx := RANDOM.range 0 to (nrmal_array.upper)
      } else {
        idx := 0
      }
      nrmal_array.remove idx
      range_array.remove (idx + range_array.lower)
      idem
    }
  )
  
  - idem <-
  ( + i:INTEGER
    (nrmal_array.count != range_array.count).if {
      crash_with_message "ERREUR"
      "ERREUR".println
      SYSTEM.exit 1
    }
    nrmal_array.is_empty.if_false {
      TEST.check (nrmal_array.last) integer (range_array.last)
      TEST.check (nrmal_array.first) integer (range_array.first)
    }
    i := 0
    {i <= nrmal_array.upper}.while_do {
      TEST.check (nrmal_array.at i) integer (range_array.at (i + range_array.lower))
      i := i + 1
    }
  )
  
