Header  
  + name := MAIN;
  
Insert
  - parent_utils:UTILS := UTILS
  
Private  
  + cltn_aaa:ARRAY INTEGER
  + cltn_bbb:ARRAY_BLOCK INTEGER
  
  - long:INTEGER <- 300
  
Public
  - main <-
  ( + x,idx:INTEGER
    RANDOM.init 2
    cltn_aaa := ARRAY INTEGER .create_with_capacity 2
    cltn_bbb := ARRAY_BLOCK INTEGER .new
    idem
    6.times {
      x := x + 1
      cltn_aaa.add_last x
      cltn_bbb.add_last x
      idem
    }
    idx := cltn_aaa.upper
    cltn_aaa.remove idx
    cltn_bbb.remove idx
    idem
    idx := cltn_aaa.lower
    cltn_aaa.remove idx
    cltn_bbb.remove idx
    idem
    main_1
  )
  
  - main_1 <-
  ( + x:INTEGER
    RANDOM.init 2
    cltn_aaa := ARRAY INTEGER .create_with_capacity 2
    cltn_bbb := ARRAY_BLOCK INTEGER .new
    x := 1
    cltn_aaa.at 0 add x
    cltn_bbb.at 0 add x
    idem
    //"1 ok\n".print
    x := 2
    cltn_aaa.at 0 add x
    cltn_bbb.at 0 add x
    //"cltn_aaa     : ".print; cltn_aaa.foreach { v:INTEGER; v.print; ' '.print; }; '\n'.print
    //"cltn_bbb: ".print; cltn_bbb.foreach { v:INTEGER; v.print; ' '.print; }; '\n'.print
    idem
    //"2 ok\n".print
    1000.times {
      + idx:INTEGER
      x := x + 1
      idx := cltn_aaa.upper
      cltn_aaa.at idx add x
      cltn_bbb.at idx add x
      //"cltn_aaa     : ".print; cltn_aaa.foreach { v:INTEGER; v.print; ' '.print; }; '\n'.print
      //"cltn_bbb: ".print; cltn_bbb.foreach { v:INTEGER; v.print; ' '.print; }; '\n'.print
      idem
    }
    main_3
  )
  
  - main_3 <-
  ( + x:INTEGER
    RANDOM.init 5
    //
    cltn_aaa := ARRAY INTEGER .create_with_capacity 2
    cltn_bbb := ARRAY_BLOCK INTEGER .new
    cltn_aaa.add_last 1
    cltn_bbb.add_last 1
    idem
    cltn_aaa.add_last 2
    cltn_bbb.add_last 2
    idem
    cltn_aaa.at 0 put 3
    cltn_bbb.at 0 put 3
    idem
    cltn_aaa.at 1 put 4
    cltn_bbb.at 1 put 4
    idem
    cltn_aaa.at 0 put 1
    cltn_bbb.at 0 put 1
    idem
    cltn_aaa.at 1 put 3
    cltn_bbb.at 1 put 3
    idem
    cltn_aaa.at 1 add 2
    cltn_bbb.at 1 add 2
    idem
    cltn_aaa.at 3 add 5
    cltn_bbb.at 3 add 5
    idem
    cltn_aaa.at 3 add 4
    cltn_bbb.at 3 add 4
    idem
    cltn_aaa.at 4 add 6
    cltn_bbb.at 4 add 6
    idem
    //
    cltn_aaa := ARRAY INTEGER .create_with_capacity 2
    cltn_bbb := ARRAY_BLOCK INTEGER .new
    idem
    cltn_aaa.add_last 1
    cltn_bbb.add_last 1
    idem
    cltn_aaa.add_last 2
    cltn_bbb.add_last 2
    idem
    long.times {
      x := cltn_aaa.last
      x := x + 1
      cltn_aaa.add_last x
      cltn_bbb.add_last x
      idem
    }
    {cltn_aaa.is_empty}.until_do {
      cltn_aaa.remove_last
      cltn_bbb.remove_last
      idem
    }
    x := 0
    
    long.times {
      x := x + 1
      cltn_aaa.add_first x
      cltn_bbb.add_first x
      idem
    }
    
    {cltn_aaa.is_empty}.until_do {
      cltn_aaa.remove_first
      cltn_bbb.remove_first
      idem
    }
    x := 1
    
    cltn_aaa.at 0 add x
    cltn_bbb.at 0 add x
    idem
    long.times {
      + idx:INTEGER
      idx := RANDOM.range 0 to (cltn_aaa.count)
      //("cltn_aaa.count=" + cltn_aaa.count.to_string + " idx=" + idx.to_string).println
      cltn_aaa.at idx add x
      cltn_bbb.at idx add x
      idem
      x := x + 1
    }
    {cltn_aaa.is_empty}.until_do {
      + idx:INTEGER
      (cltn_aaa.upper > 0).if {
        idx := RANDOM.range 0 to (cltn_aaa.upper)
      } else {
        idx := 0
      }
      cltn_aaa.remove idx
      cltn_bbb.remove idx
      idem
    }
  )
  
  - idem <-
  ( + i:INTEGER
    (cltn_aaa.lower != cltn_bbb.lower).if {
      crash_with_message "ERREUR"
    }
    (cltn_aaa.upper != cltn_bbb.upper).if {
      crash_with_message "ERREUR"
      "ERREUR".println
      SYSTEM.exit 1
    }
    (cltn_aaa.count != cltn_bbb.count).if {
      crash_with_message "ERREUR"
      "ERREUR".println
      SYSTEM.exit 1
    }
    cltn_aaa.is_empty.if_false {
      TEST.check (cltn_aaa.last) integer (cltn_bbb.last)
      TEST.check (cltn_aaa.first) integer (cltn_bbb.first)
    }
    i := 0
    {i <= cltn_aaa.upper}.while_do {
      TEST.check (cltn_aaa.at i) integer (cltn_bbb.at i)
      i := i + 1
    }
  )
  
