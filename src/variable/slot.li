Header

  + name        := SLOT;

  /*Parent for slot runnable*/

Inherit

  + parent_itm_slot:ITM_SLOT := ITM_SLOT

Public

  - common_slot:SLOT <- Self

  + slot_id:SLOT_DATA

  + receiver_type:TYPE
  
  //
  // Creation.
  //

  - create s:ITM_SLOT type t:TYPE :SLOT <-
  ( + result:SLOT

    result := clone
    result.make s type t
  )

  - make s:ITM_SLOT type t:TYPE :SLOT <-
  ( + result:SLOT
    
    s.set_used
    parent_itm_slot := s
    receiver_type := t
    //
    (t != NULL).if { // '=' or '!=' case
      (affect = '<').if {
        // Code.
        result := slot_code_intern := SLOT_CODE.create Self with value
      } else {
        // Data
        create_slot_data
        result := slot_data_intern
      }
    }
    //
    result
  )

  //
  // Style.
  //

  - lower_style:INTEGER <-
  ( + result:INTEGER
    (slot_data_intern = NULL).if {
      result := 1
    }
    result
  )

  - upper_style:INTEGER <-
  ( + result:INTEGER
    (slot_code_intern != NULL).if {
      (slot_code_list != NULL).if {
	result := slot_code_list.upper + 2
      } else {
	result := 1
      }
    }
    result
  )

  - slot_data:SLOT_DATA <-
  (
    (slot_data_intern = NULL).if {
      create_slot_data
      (slot_id = NULL).if {
	slot_id := SLOT_DATA.create common_slot type_full (TYPE_ID.get_index 1.default)
	slot_id.init
      }
    }
    slot_data_intern
  )

  - slot_code idx:INTEGER :SLOT_CODE <-
  ( + result:SLOT_CODE

    (idx = 1).if {
      result := slot_code_intern
    } else {
      result := slot_code_list.at (idx-2)
    }
    result
  )

  - add_style v:ITM_CODE :INTEGER <-
  ( + slot:SLOT_CODE
    + result:INTEGER

    slot := SLOT_CODE.create common_slot with v
    (slot_code_intern = NULL).if {
      slot_code_intern := slot
      slot_id := SLOT_DATA.create common_slot type_full (TYPE_ID.get_index 0.default)
      slot_id.init
      result := 1
    } else {
      (slot_code_list = NULL).if {
	slot_code_list := ARRAY SLOT_CODE .create_with_capacity 1
      }
      slot_code_list.add_last slot
      (slot_id = NULL).if {
	slot_id := SLOT_DATA.create common_slot type_full (TYPE_ID.get_index 1.default)
	slot_id.init
      }
      result := slot_code_list.upper + 2
    }
    result
  )

  //
  // Display.
  //

  - display_all <-
  (
    (lower_style).to (upper_style) do { j:INTEGER
      item_style j.display_all
    }
  )

Public

  + slot_data_intern:SLOT_DATA; // Index 0
  + slot_code_intern:SLOT_CODE; // Index 1

  + slot_code_list:ARRAY SLOT_CODE; // Index x+2
  + slot_data_list:ARRAY SLOT_DATA; // Vector data slot

  - create_slot_data <-
  ( + typ:TYPE_FULL
    + tm:ITM_TYPE_MULTI
    + ts:ITM_TYPE_MONO

    tm ?= result_type
    (tm != NULL).if {
      slot_data_list := ARRAY SLOT_DATA .create_with_capacity (tm.count-1)
      (tm.lower).to (tm.upper-1) do { k:INTEGER
	typ := tm.at k.to_run_for receiver_type pos (position.prototype.filename)
	slot_data_list.add_last (
	  SLOT_DATA.create common_slot type_full typ
	)
      }
      typ := tm.last.to_run_for receiver_type pos (position.prototype.filename)
    } else {
      ts ?= result_type
      typ := ts.to_run_for receiver_type pos (position.prototype.filename)
    }
    slot_data_intern := SLOT_DATA.create common_slot type_full typ
  )
  
