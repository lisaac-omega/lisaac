Header

  + name    := WRITE_SLOT;

  /*Write slot*/

Inherit

  + parent_write:Expanded WRITE

Public

  - is_invariant:BOOLEAN <- receiver.is_invariant && {value.is_invariant}

  + slot:SLOT_DATA

  - variable:VARIABLE <- slot

  + receiver:EXPR

  //
  // Creation.
  //

  - create p:POSITION with val:EXPR in (r:EXPR,s:SLOT_DATA) :SELF <-
  ( + result:SELF
    ? {p.code != 0}
    result := clone
    result.make p with val in (r,s)
    result
  )

  - make p:POSITION with val:EXPR in (r:EXPR,s:SLOT_DATA) <-
  (
    position := p
    value    := val
    receiver := r
    slot     := s
  )

  - my_copy:SELF <-
  ( + new_val:EXPR
    + result:SELF

    new_val := value.my_copy
    result ?= variable.write position with (receiver.my_copy) value new_val
    (quiet_generation).if {
      result.set_quiet_generation
    }
    result
  )

  //
  // Execute.
  //

  - execute_access_unlink:INSTR <-
  (
    slot.execute
    receiver.execute_unlink
  )

  - execute_access_link <-
  (
    slot.execute
    receiver := receiver.execute_link
  )

  - remove <-
  (
    receiver.remove
    parent_write.remove
  )

  //
  // Genere
  //

  - genere <-
  ( + tf:TYPE_FULL
    + t:TYPE

    t := slot.receiver_type
    t.add_genere_list
    (! quiet_generation).if {
      (t.alias_slot = variable).if {
        tf := receiver.static_type
        ((tf.is_strict) || {tf.is_expanded_ref}).if {
          output.append "(*"
          receiver.genere
          output.add_last ')'
        }.elseif {tf.is_expanded} then {
          receiver.genere
        } else {
          output.append "*(("
          t := slot.receiver_type
          t.put_reference_declaration output
          output.add_last ' '
          t.put_reference_star_declaration output
          output.add_last ')'
          receiver.genere
          output.add_last ')'
        }
      } else {
        // Receiver.        
        tf := receiver.static_type
        ((tf.is_strict) || {tf.is_expanded_ref}).if {
          receiver.genere
          output.append "->"
        }.elseif {tf.is_expanded} then {
          receiver.genere
          output.add_last '.'
        } else {
          output.append "(("
          t := slot.receiver_type
          t.put_reference_declaration output
          output.add_last ' '
          t.put_reference_star_declaration output
          output.add_last ')'
          receiver.genere
          output.append ")->"
        }
        //
        output.append (variable.intern_name)
      }
      //
      ((value.static_type.raw = TYPE_NULL) && {variable.type.raw.is_block}).if {
        output.append ".__id=0"
      } else {
        output.add_last '='
        genere_value
      }
    }
  )
  
  //
  // Display.
  //

  - display buffer:STRING_BUFFER <-
  (
    receiver.display buffer
    buffer.append "->"
    parent_write.display buffer
  )







